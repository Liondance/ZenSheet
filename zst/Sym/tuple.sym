///
/// tuple.sym
///
/// Tuple tests
///

//

sys.reset();

:: t0 := ("t0", false, 0, 0.0);

:: tf0 :- ("tf0", x, x^2, x^3);

double x := 0;

verify t0 = ("t0", false, 0, 0.0)
verify t0[0] = "t0"
verify t0[1] = false
verify t0[2] = 0
verify t0[3] = 0.0

verify tf0 = ("tf0", x, x^2, x^3)
verify tf0[0] = "tf0"
verify tf0[1] = x
verify tf0[2] = x^2
verify tf0[3] = x^3

x := 8;

verify t0 = ("t0", false, 0, 0.0)
verify t0[0] = "t0"
verify t0[1] = false
verify t0[2] = 0
verify t0[3] = 0.0

verify tf0 = ("tf0", x, x^2, x^3)
verify tf0[0] = "tf0"
verify tf0[1] = x
verify tf0[2] = x^2
verify tf0[3] = x^3

//

sys.reset();

:: tuple2 := ( 0, "zero" );
:: tuple3 := ( 0, "zero", (0, "zero") );
:: tuple4 := ( 0, "zero", (0, "zero"), [ 4 ] );
:: tuple5 := ( 0, "zero", (0, "zero"), [ 4 ], [ 4, 5 ] );
:: tuple6 := ( 0, "zero", (0, "zero"), [ 4 ], [ 4, 5 ], [ 4, 5, 6 ] );
:: tuple7 := ( 0, "zero", (0, "zero"), [ 4 ], [ 4, 5 ], [ 4, 5, 6 ], [ 4, 5, 6, 7 ] );
:: tuple8 := ( 0, "zero", (0, "zero"), [ 4 ], [ 4, 5 ], [ 4, 5, 6 ], [ 4, 5, 6, 7 ], [ 4, 5, 6, 7, 8 ] );

verify tuple2[0] = 0
verify tuple3[0] = 0
verify tuple4[0] = 0
verify tuple5[0] = 0
verify tuple6[0] = 0
verify tuple7[0] = 0
verify tuple8[0] = 0

verify tuple2[1] = "zero"
verify tuple3[1] = "zero"
verify tuple4[1] = "zero"
verify tuple5[1] = "zero"
verify tuple6[1] = "zero"
verify tuple7[1] = "zero"
verify tuple8[1] = "zero"

verify tuple3[2] = (0, "zero")
verify tuple4[2] = (0, "zero")
verify tuple5[2] = (0, "zero")
verify tuple6[2] = (0, "zero")
verify tuple7[2] = (0, "zero")
verify tuple8[2] = (0, "zero")

verify tuple3[2][0] = 0
verify tuple4[2][0] = 0
verify tuple5[2][0] = 0
verify tuple6[2][0] = 0
verify tuple7[2][0] = 0
verify tuple8[2][0] = 0

verify tuple3[2][1] = "zero"
verify tuple4[2][1] = "zero"
verify tuple5[2][1] = "zero"
verify tuple6[2][1] = "zero"
verify tuple7[2][1] = "zero"
verify tuple8[2][1] = "zero"

verify tuple4[3] = [ 4 ]
verify tuple5[3] = [ 4 ]
verify tuple6[3] = [ 4 ]
verify tuple7[3] = [ 4 ]
verify tuple8[3] = [ 4 ]

verify tuple4[3][0] = 4
verify tuple5[3][0] = 4
verify tuple6[3][0] = 4
verify tuple7[3][0] = 4
verify tuple8[3][0] = 4

verify tuple5[4] = [ 4, 5 ]
verify tuple6[4] = [ 4, 5 ]
verify tuple7[4] = [ 4, 5 ]
verify tuple8[4] = [ 4, 5 ]

verify tuple5[4][0] = 4
verify tuple6[4][0] = 4
verify tuple7[4][0] = 4
verify tuple8[4][0] = 4

verify tuple5[4][1] = 5
verify tuple6[4][1] = 5
verify tuple7[4][1] = 5
verify tuple8[4][1] = 5

verify tuple6[5] = [ 4, 5, 6 ]
verify tuple7[5] = [ 4, 5, 6 ]
verify tuple8[5] = [ 4, 5, 6 ]

verify tuple6[5][0] = 4
verify tuple7[5][0] = 4
verify tuple8[5][0] = 4

verify tuple6[5][1] = 5
verify tuple7[5][1] = 5
verify tuple8[5][1] = 5

verify tuple6[5][2] = 6
verify tuple7[5][2] = 6
verify tuple8[5][2] = 6

verify tuple7[6] = [ 4, 5, 6, 7 ]
verify tuple8[6] = [ 4, 5, 6, 7 ]

verify tuple7[6][0] = 4
verify tuple8[6][0] = 4

verify tuple7[6][1] = 5
verify tuple8[6][1] = 5

verify tuple7[6][2] = 6
verify tuple8[6][2] = 6

verify tuple7[6][3] = 7
verify tuple8[6][3] = 7

verify tuple8[7] = [ 4, 5, 6, 7, 8 ]

verify tuple8[7][0] = 4
verify tuple8[7][1] = 5
verify tuple8[7][2] = 6
verify tuple8[7][3] = 7
verify tuple8[7][4] = 8

//

sys.reset();

:: tp := (0, "zero");

verify tp[0] = 0
verify tp[1] = "zero"
verify tp = (0, "zero")

tp := (1, "one");

verify tp[0] = 1
verify tp[1] = "one"
verify tp = (1, "one")

tp[0] := 2;
tp[1] := "two";

verify tp[0] = 2
verify tp[1] = "two"
verify tp = (2, "two")

:: tc := tp;

verify tc[0] = 2
verify tc[1] = "two"
verify tc = (2, "two")

verify tp[0] = 2
verify tp[1] = "two"
verify tp = (2, "two")

verify tc = tp

tc[0] := 3;
tc[1] := "three";

tp := (3, "three");

verify tc[0] = 3
verify tc[1] = "three"
verify tc = (3, "three")

verify tp[0] = 3
verify tp[1] = "three"
verify tp = (3, "three")

verify tc = tp

tp[0] := 4;
tp[1] := "four";

verify tc[0] = 3
verify tc[1] = "three"
verify tc = (3, "three")

verify tp[0] = 4
verify tp[1] = "four"
verify tp = (4, "four")

verify tc <> tp

//

sys.reset();

:: pair0 := ( 0, "zero" );
:: pair1 := ( 1,  "one" );

:: tuple3 := ( 0, "zero", pair0 );
:: tuple4 := ( 0, "zero", pair0, [ 4 ] );
:: tuple5 := ( 0, "zero", pair0, [ 4 ], [ 4, 5 ] );
:: tuple6 := ( 0, "zero", pair0, [ 4 ], [ 4, 5 ], [ 4, 5, 6 ] );
:: tuple7 := ( 0, "zero", pair0, [ 4 ], [ 4, 5 ], [ 4, 5, 6 ], [ 4, 5, 6, 7 ] );
:: tuple8 := ( 0, "zero", pair0, [ 4 ], [ 4, 5 ], [ 4, 5, 6 ], [ 4, 5, 6, 7 ], [ 4, 5, 6, 7, 8 ] );

verify pair0[0] = 0
verify pair0[1] = "zero"

verify pair1[0] = 1
verify pair1[1] = "one"

verify tuple3[0] = 0
verify tuple4[0] = 0
verify tuple5[0] = 0
verify tuple6[0] = 0
verify tuple7[0] = 0
verify tuple8[0] = 0

verify tuple3[1] = "zero"
verify tuple4[1] = "zero"
verify tuple5[1] = "zero"
verify tuple6[1] = "zero"
verify tuple7[1] = "zero"
verify tuple8[1] = "zero"

verify tuple3[2] = pair0
verify tuple4[2] = pair0
verify tuple5[2] = pair0
verify tuple6[2] = pair0
verify tuple7[2] = pair0
verify tuple8[2] = pair0

verify tuple3[2][0] = 0
verify tuple4[2][0] = 0
verify tuple5[2][0] = 0
verify tuple6[2][0] = 0
verify tuple7[2][0] = 0
verify tuple8[2][0] = 0

verify tuple3[2][1] = "zero"
verify tuple4[2][1] = "zero"
verify tuple5[2][1] = "zero"
verify tuple6[2][1] = "zero"
verify tuple7[2][1] = "zero"
verify tuple8[2][1] = "zero"

verify tuple4[3] = [ 4 ]
verify tuple5[3] = [ 4 ]
verify tuple6[3] = [ 4 ]
verify tuple7[3] = [ 4 ]
verify tuple8[3] = [ 4 ]

verify tuple4[3][0] = 4
verify tuple5[3][0] = 4
verify tuple6[3][0] = 4
verify tuple7[3][0] = 4
verify tuple8[3][0] = 4

verify tuple5[4] = [ 4, 5 ]
verify tuple6[4] = [ 4, 5 ]
verify tuple7[4] = [ 4, 5 ]
verify tuple8[4] = [ 4, 5 ]

verify tuple5[4][0] = 4
verify tuple6[4][0] = 4
verify tuple7[4][0] = 4
verify tuple8[4][0] = 4

verify tuple5[4][1] = 5
verify tuple6[4][1] = 5
verify tuple7[4][1] = 5
verify tuple8[4][1] = 5

verify tuple6[5] = [ 4, 5, 6 ]
verify tuple7[5] = [ 4, 5, 6 ]
verify tuple8[5] = [ 4, 5, 6 ]

verify tuple6[5][0] = 4
verify tuple7[5][0] = 4
verify tuple8[5][0] = 4

verify tuple6[5][1] = 5
verify tuple7[5][1] = 5
verify tuple8[5][1] = 5

verify tuple6[5][2] = 6
verify tuple7[5][2] = 6
verify tuple8[5][2] = 6

verify tuple7[6] = [ 4, 5, 6, 7 ]
verify tuple8[6] = [ 4, 5, 6, 7 ]

verify tuple7[6][0] = 4
verify tuple8[6][0] = 4

verify tuple7[6][1] = 5
verify tuple8[6][1] = 5

verify tuple7[6][2] = 6
verify tuple8[6][2] = 6

verify tuple7[6][3] = 7
verify tuple8[6][3] = 7

verify tuple8[7] = [ 4, 5, 6, 7, 8 ]

verify tuple8[7][0] = 4
verify tuple8[7][1] = 5
verify tuple8[7][2] = 6
verify tuple8[7][3] = 7
verify tuple8[7][4] = 8

:: deep := ( 0, pair1 );
:: deeper := ( 0, pair1, deep );
:: deepest := ( 0, pair1, deep, deeper );

verify deepest = deepest
verify deepest[3] = deeper
verify deepest[3][2] = deep
verify deepest[3][2][1] = pair1
verify deepest[3][2][1][0] = 1

//

sys.reset();

:: et := ("tuple", 0.0, 0.0, 0.0);
:: lt :- ("tuple",   x, x^2, x^3);

double x := 3;

verify et = ("tuple", 0.0, 0.0,  0.0)
verify lt = ("tuple", 3.0, 9.0, 27.0)

verify et <> lt

et[1] :=  3.0;
et[2] :=  9.0;
et[3] := 27.0;

verify et = lt

et[1] :=  4.0;
et[2] := 16.0;
et[3] := 64.0;

verify et <> lt

x := 4.0;

verify et = lt

//

sys.reset();

:: t0 := (0, "zero");
:: t1 := (1, "one");

verify t0 = (0, "zero")
verify t1 = (1, "one")

var tt := t0;

verify t0 = (0, "zero")
verify t1 = (1, "one")
verify tt = (0, "zero")

t0 := t1;

verify t0 = (1, "one")
verify t1 = (1, "one")
verify tt = (0, "zero")

t1 := tt;

verify t0 = (1, "one")
verify t1 = (0, "zero")
verify tt = (0, "zero")

sys.undefine('tt')

verify t0 = (1, "one")
verify t1 = (0, "zero")

verify | symbols() | = 2

//

sys.reset();

:: pair0 := ( 0, "zero" );

:: tuple3 := ( 0, "zero", pair0 );

verify tuple3[0] = 0
verify tuple3[1] = "zero"
verify tuple3[2] = pair0
verify tuple3[2][0] = 0
verify tuple3[2][1] = "zero"

//

sys.reset();

:: A := [
	( 0, "zero" ),
	( 1, "one" ),
	( 2, "two" )
];

verify A[0][0] = 0
verify A[0][1] = "zero"
verify A[0] = ( 0, "zero" )

verify A[1][0] = 1
verify A[1][1] = "one"
verify A[1] = ( 1, "one" )

verify A[2][0] = 2
verify A[2][1] = "two"
verify A[2] = ( 2, "two" )

:: t := A[0];
A[0] := A[1];
A[1] := A[2];
A[2] := t;

verify A[0][0] = 1
verify A[0][1] = "one"
verify A[0] = ( 1, "one" )

verify A[1][0] = 2
verify A[1][1] = "two"
verify A[1] = ( 2, "two" )

verify A[2][0] = 0
verify A[2][1] = "zero"
verify A[2] = ( 0, "zero" )

//

sys.reset();

:: my_field := struct{ lazy int; }('41');
verify (/. (struct{ lazy int; } f) -> f[0] + 1)(my_field) = 42

verify true
